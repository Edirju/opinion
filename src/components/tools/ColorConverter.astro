---
import Section from "../Section.astro";
import ToolsIcon from "@/assets/ToolsIcon.astro";
---

<Section>
  <article
    class="font-[family-name:var(--font-body)] text-orange-400/85 flex flex-col gap-6 animate-fade-in-up"
  >
    <header class="flex flex-col gap-2">
      <h2
        class="flex items-center gap-1 justify-center sm:justify-start text-[clamp(1.125rem,1.0909rem_+_0.1818vw,1.25rem)] capitalize font-bold tracking-tighter text-pretty text-shadow-[0_0_8px_rgba(var(--black),0.25)]"
      >
        <ToolsIcon /><span class="text-orange-400/45 font-extralight">|</span
        >Color Picker & Converter.
      </h2>
      <p
        class="text-sm font-light text-white/65 tracking-tighter text-center sm:text-left text-pretty [&>strong]:font-medium [&>strong]:text-orange-400/65 [&>strong]:text-shadow-[0_0_8px_rgba(var(--primary),0.25)]"
      >
        Esta herramienta gratuita calcula y convierte colores en diferentes
        formatos. <strong>¿Necesitas convertir colores?</strong>
      </p>
    </header>

    <footer
      class="container flex flex-col gap-6 p-4 border border-orange-400/25 rounded-lg shadow-[0_0_8px_rgba(var(--primary),0.15)] bg-linear-to-tr from-gray-900/45 via-zinc-800/45 to-neutral-900/45"
    >
      <fieldset>
        <legend>Selección de Color</legend>
        <div class="input-group">
          <input id="hexInput" type="text" value="#FFFEFE" maxlength="7" />
          <input id="colorPicker" type="color" value="#FFFEFE" />
        </div>
      </fieldset>

      <fieldset>
        <legend>Conversiones a:</legend>
        <div class="result">
          <div class="format">
            <strong>RGB:</strong>
            <span id="rgbOutput"></span>
          </div>
          <div class="format">
            <strong>HSL:</strong>
            <span id="hslOutput"></span>
          </div>
          <div class="format">
            <strong>LCH:</strong>
            <span id="lchOutput"></span>
          </div>
          <div class="format">
            <strong>OKLCH:</strong>
            <span id="oklchOutput"></span>
          </div>
        </div>
      </fieldset>
    </footer>
  </article>
</Section>

<style>
  @import "tailwindcss";
  @plugin '@midudev/tailwind-animations';

  fieldset {
    @apply border border-orange-400/10 font-[family-name:var(--font-body)] text-white/65 p-2 rounded-lg;
    legend {
      @apply font-semibold text-xl tracking-tighter text-pretty text-[clamp(1rem,0.9659rem_+_0.1818vw,1.125rem)] px-2 ml-2 text-shadow-[0_0_8px_rgba(var(--light),0.15)];
    }
  }
  .input-group {
    @apply flex items-center gap-4 text-orange-400/65;
    input[type="text"] {
      @apply w-full px-2 py-2 border border-[rgb(var(--dark),0.1)] rounded-lg sm:text-xl text-[18px];
    }
    input[type="color"] {
      @apply flex-none w-10 h-10 cursor-pointer;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      border-radius: 50%;
      border: 2px solid rgb(var(--primary), 0.85);
      padding: 0;
      background: transparent;
    }
    input[type="color"]::-webkit-color-swatch {
      border: 0;
      border-radius: 5px;
      background-color: #fffefe;
    }
    input[type="color"]::-webkit-color-swatch-wrapper {
      padding: 0;
    }
  }
  .result {
    @apply grid grid-cols-[repeat(auto-fit,minmax(300px,1fr))] gap-2 text-base;
    .format {
      @apply flex flex-col gap-2 border border-orange-400/10 p-2 rounded-lg;
      strong{
        @apply font-semibold text-white/55;
      }
      span {
        @apply font-[family-name:var(--font-mono)] font-light text-sm text-pretty text-neutral-500 pl-4 tracking-widest;
      }
    }
  }
</style>

<script is:inline>
  // --- Basic Setup ---
  const hexInput = document.getElementById("hexInput");
  const colorPicker = document.getElementById("colorPicker");
  const rgbOutput = document.getElementById("rgbOutput");
  const hslOutput = document.getElementById("hslOutput");
  const lchOutput = document.getElementById("lchOutput");
  const oklchOutput = document.getElementById("oklchOutput");

  // --- Core Conversion Functions ---

  function hexToRGB(hex) {
    const r = parseInt(hex.slice(1, 3), 16);
    const g = parseInt(hex.slice(3, 5), 16);
    const b = parseInt(hex.slice(5, 7), 16);
    return { r, g, b };
  }

  function rgbToHSL(r, g, b) {
    r /= 255;
    g /= 255;
    b /= 255;
    const max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    let h,
      s,
      l = (max + min) / 2;

    if (max === min) {
      h = s = 0;
    } else {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }

    return {
      h: Math.round(h * 360),
      s: Math.round(s * 100),
      l: Math.round(l * 100),
    };
  }

  // --- LCH Conversion ---
  // RGB -> XYZ -> Lab -> LCH

  function rgbToLch(r, g, b) {
    // Step 1: RGB to XYZ
    let R = r / 255;
    let G = g / 255;
    let B = b / 255;

    R = R > 0.04045 ? Math.pow((R + 0.055) / 1.055, 2.4) : R / 12.92;
    G = G > 0.04045 ? Math.pow((G + 0.055) / 1.055, 2.4) : G / 12.92;
    B = B > 0.04045 ? Math.pow((B + 0.055) / 1.055, 2.4) : B / 12.92;

    R *= 100;
    G *= 100;
    B *= 100;

    const X = R * 0.4124 + G * 0.3576 + B * 0.1805;
    const Y = R * 0.2126 + G * 0.7152 + B * 0.0722;
    const Z = R * 0.0193 + G * 0.1192 + B * 0.9505;

    // Step 2: XYZ to Lab
    let var_X = X / 95.047; // Observer= 2°, Illuminant= D65
    let var_Y = Y / 100.0;
    let var_Z = Z / 108.883;

    var_X =
      var_X > 0.008856 ? Math.pow(var_X, 1 / 3) : 7.787 * var_X + 16 / 116;
    var_Y =
      var_Y > 0.008856 ? Math.pow(var_Y, 1 / 3) : 7.787 * var_Y + 16 / 116;
    var_Z =
      var_Z > 0.008856 ? Math.pow(var_Z, 1 / 3) : 7.787 * var_Z + 16 / 116;

    const L = 116 * var_Y - 16;
    const a = 500 * (var_X - var_Y);
    const b_lab = 200 * (var_Y - var_Z);

    // Step 3: Lab to LCH
    const C = Math.sqrt(Math.pow(a, 2) + Math.pow(b_lab, 2));
    let H = Math.atan2(b_lab, a) * (180 / Math.PI);
    if (H < 0) H += 360;

    return { L, C, H };
  }

  // --- OKLCH Conversion (from gist.github.com/dkaraush) ---
  const multiplyMatrices = (A, B) => {
    return [
      A[0] * B[0] + A[1] * B[1] + A[2] * B[2],
      A[3] * B[0] + A[4] * B[1] + A[5] * B[2],
      A[6] * B[0] + A[7] * B[1] + A[8] * B[2],
    ];
  };
  const rgb2srgbLinear = (rgb) =>
    rgb.map((c) =>
      Math.abs(c) <= 0.04045
        ? c / 12.92
        : (c < 0 ? -1 : 1) * ((Math.abs(c) + 0.055) / 1.055) ** 2.4
    );
  const rgbLinear2xyz = (rgb) => {
    return multiplyMatrices(
      [
        0.41239079926595934, 0.357584339383878, 0.1804807884018343,
        0.21263900587151027, 0.715168678767756, 0.07219231536073371,
        0.01933081871559182, 0.11919477979462598, 0.9505321522496607,
      ],
      rgb
    );
  };
  const xyz2oklab = (xyz) => {
    const LMS = multiplyMatrices(
      [
        0.819022437996703, 0.3619062600528904, -0.1288737815209879,
        0.0329836539323885, 0.9292868615863434, 0.0361446663506424,
        0.0481771893596242, 0.2642395317527308, 0.6335478284694309,
      ],
      xyz
    );
    const LMSg = LMS.map((val) => Math.cbrt(val));
    return multiplyMatrices(
      [
        0.210454268309314, 0.7936177747023054, -0.0040720430116193,
        1.9779985324311684, -2.4285922420485799, 0.450593709617411,
        0.0259040424655478, 0.7827717124575296, -0.8086757549230774,
      ],
      LMSg
    );
  };
  const oklab2oklch = ([l, a, b]) => [
    l,
    Math.sqrt(a ** 2 + b ** 2),
    Math.abs(a) < 0.0002 && Math.abs(b) < 0.0002
      ? NaN
      : ((((Math.atan2(b, a) * 180) / Math.PI) % 360) + 360) % 360,
  ];
  const rgb2oklch = (rgb) =>
    oklab2oklch(
      xyz2oklab(rgbLinear2xyz(rgb2srgbLinear(rgb.map((c) => c / 255))))
    );

  // --- Main Update Logic ---
  function updateColor(hex) {
    hexInput.value = hex;
    colorPicker.value = hex;

    const { r, g, b } = hexToRGB(hex);
    rgbOutput.textContent = `rgb(${r}, ${g}, ${b})`;

    const hsl = rgbToHSL(r, g, b);
    hslOutput.textContent = `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`;

    // LCH Conversion
    const lch = rgbToLch(r, g, b);
    lchOutput.textContent = `lch(${lch.L.toFixed(2)} ${lch.C.toFixed(2)} ${lch.H.toFixed(2)})`;

    // OKLCH Conversion
    const [okl, okc, okh] = rgb2oklch([r, g, b]);
    oklchOutput.textContent = `oklch(${(okl * 100).toFixed(2)}% ${okc.toFixed(3)} ${isNaN(okh) ? 0 : okh.toFixed(2)})`;
  }

  // --- Event Listeners ---
  hexInput.addEventListener("input", (e) => {
    const val = e.target.value;
    if (/^#[0-9A-Fa-f]{6}$/.test(val)) {
      updateColor(val);
    }
  });

  colorPicker.addEventListener("input", (e) => {
    updateColor(e.target.value);
  });

  updateColor(hexInput.value);
</script>
